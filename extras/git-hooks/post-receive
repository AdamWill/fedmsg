#!/usr/bin/env python

import getpass
import os
import sys

import pygit2

import fedmsg
import fedmsg.config

# Use $GIT_DIR to determine where this repo is.
abspath = os.path.abspath(os.environ['GIT_DIR'])
# This assumes git root dir is named "repo_name.git"
repo_name = '.'.join(abspath.split(os.path.sep)[-1].split('.')[:-1])

username = getpass.getuser()

repo = pygit2.Repository(abspath)

print "Emitting a message to the fedmsg bus."
config = fedmsg.config.load_config([], None)
config['active'] = True
config['endpoints']['relay_inbound'] = config['relay_inbound']
fedmsg.init(name='relay_inbound', cert_prefix='scm', **config)

def revs_between(head, base):
    bail = False

    yield unicode(head.id)

    for parent in head.parents:
        if parent.id == base.id:
            bail = True

    if not bail:
        for parent in head.parents:
            for rev in revs_between(parent, base):
                yield rev

# Read in all the rev information git-receive-pack hands us.
lines = [line.split() for line in sys.stdin.readlines()]
for line in lines:
    base, head, branch = line
    branch = '/'.join(branch.split('/')[2:])

    try:
        head = repo.revparse_single(head)
    except KeyError:
        # This means they are deleting this branch.. and we don't have a fedmsg
        # for that (yet?).  It is disallowed by dist-git in Fedora anyways.
        continue

    try:
        base = repo.revparse_single(base)
        revs = revs_between(head, base)
    except KeyError:
        revs = [unicode(head.id)]

    def _build_commit(rev):
        commit = repo.revparse_single(rev)

        return dict(
            name=commit.author.name,
            email=commit.author.email,
            username=username,
            summary=commit.message.split('\n')[0],
            message=commit.message,
            stats=dict(
                # pygit2 doesn't support this yet
                # https://github.com/libgit2/pygit2/issues/406
                files=[],   # commit.stats.files,
                total=None, # commit.stats.total,
            ),
            rev=rev,
            path=abspath,
            repo=repo_name,
            branch=branch,
            agent=os.getlogin(),
        )

    commits = map(_build_commit, revs)

    for commit in commits:

        if commit is None:
            continue

        fedmsg.publish(
            topic="receive",
            msg=dict(commit=commit),
            modname="git",
        )
